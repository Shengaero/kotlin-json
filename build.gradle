/*
 * Copyright 2018 Kaidan Gustave
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
    ext {
        kotlin_version = '1.2.50'
        ktor_version = '0.9.3-alpha-3'
        dokka_version = '0.9.17'
        junit_version = '1.0.1'
        jupiter_version = '5.0.1'
        shadow_version = '2.0.1'
        versions_version = '0.17.0'
        bintray_version = '1.7.3'
    }

    repositories {
        jcenter()
    }
    
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junit_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:$shadow_version"
        classpath "com.github.ben-manes:gradle-versions-plugin:$versions_version"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintray_version"
    }
}

def versionObj = [major: 1, minor: 6, revision: 0]
def versionStr = versionObj.values().join('.')

allprojects {
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    group = 'me.kgustave'
    version = versionStr

    bintray {
        user = bintrayUsername
        key = bintrayApiKey

        publications = ['BintrayRelease']
        publish = true

        pkg {
            repo = 'maven'
            name = 'kotlin-json'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/TheMonitorLizard/kotlin-json/'
            githubRepo = 'https://github.com/TheMonitorLizard/kotlin-json/'
            version {
                name = project.version
                released = new Date()
            }
        }
    }
}

subprojects {
    def moduleName = "$rootProject.name-$project.name"

    apply plugin: 'java-library'
    apply plugin: 'kotlin'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'com.github.ben-manes.versions'

    ext {
        kotlinJvmTarget = '1.8'
        repositories {
            ktorBintray = {
                maven { url = "https://dl.bintray.com/kotlin/ktor" }
            }
        }

        dependencies {
            kotlin = { String module -> "org.jetbrains.kotlin:kotlin-$module:$kotlin_version" }
            ktor = { String module -> "io.ktor:ktor-$module:$ktor_version" }
            junit = { String module -> "org.junit.jupiter:junit-jupiter-$module:$jupiter_version" }
        }
    }

    rootProject.subprojects.each { proj ->
        String functionName = proj.name.split('-').collect { it.capitalize() }.join('').uncapitalize()
        project.ext."$functionName" = { proj }
    }

    sourceCompatibility = 1.8

    sourceSets {
        test.kotlin.srcDirs += 'src/test/kotlin'
        test.compileClasspath += main.compileClasspath
        test.runtimeClasspath += main.runtimeClasspath
    }

    repositories {
        jcenter()
    }

    dependencies {
        compileOnly kotlin('stdlib')
        compileOnly kotlin('stdlib-jdk8')
        compileOnly kotlin('stdlib-jdk7')

        testCompile kotlin('stdlib')
        testCompile kotlin('stdlib-jdk8')
        testCompile kotlin('stdlib-jdk7')
        testCompile kotlin('test-junit')
        testCompile junit('api')
        testCompile junit('params')
        testRuntime junit('engine')
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = kotlinJvmTarget
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = kotlinJvmTarget
        }
    }

    jar {
        baseName = "$moduleName"
        version = versionStr
        classifier = ''
        manifest {
            attributes 'Automatic-Module-Name': "kotlin.json.$project.name",
                       'Implementation-Version': versionStr,
                       'Implementation-Title': "$moduleName"
        }
    }

    dokka {
        outputFormat = 'html'
        outputDirectory = "$buildDir/dokka"

        jdkVersion = 8
        impliedPlatforms = ['JVM']

        noStdlibLink = false

        skipDeprecated = true
        skipEmptyPackages = true

        reportUndocumented = false
        includeNonPublic = false
    }

    task copySource(type: Copy) {
        group = 'build'
        description = 'Copies sources for release to the build directory'

        from { sourceSets.main.allSource }
        destinationDir = file("$buildDir/sources")
    }

    task sourcesJar(type: Jar, dependsOn: copySource) {
        group = 'build'
        description = 'Generates a sources jar'

        baseName = "$moduleName"
        version = versionStr
        classifier = 'sources'
        from copySource.destinationDir
    }

    task dokkaJar(type: Jar, dependsOn: dokka) {
        group = 'build'
        description = 'Generates a dokka-javadoc jar'

        baseName = "$moduleName"
        version = versionStr
        classifier = 'javadoc'
        logging.level = LogLevel.QUIET
        from dokka.outputDirectory
    }

    shadowJar {
        baseName = "$moduleName"
        version = versionStr
        classifier = 'withDependencies'
    }

    build {
        dependsOn clean
        dependsOn testClasses
        dependsOn jar
        dependsOn sourcesJar
        dependsOn dokkaJar
        dependsOn shadowJar

        testClasses.mustRunAfter clean
        jar.mustRunAfter testClasses
        sourcesJar.mustRunAfter jar
        dokkaJar.mustRunAfter sourcesJar
        shadowJar.mustRunAfter dokkaJar
    }

    publishing {
        publications {
            BintrayRelease(MavenPublication) {
                groupId = project.group
                artifactId = moduleName
                version = project.version

                from project.components.java
                artifact project.tasks.dokkaJar
                artifact project.tasks.sourcesJar

                pom.withXml {
                    def repositoriesNode = asNode().appendNode('repositories')
                    def repositoryNode = repositoriesNode.appendNode('repository')

                    repositoryNode.appendNode('name', 'bintray')
                    repositoryNode.appendNode('id', 'bintray-kgustave-maven')
                    repositoryNode.appendNode('url', 'https://dl.bintray.com/kgustave/maven')

                    def dependingModules = configurations.compile.filter { it instanceof ProjectDependency }
                    if(dependingModules.size() > 0) {
                        def dependenciesNode = asNode().appendNode('dependencies')
                        dependingModules.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.dependencyProject.moduleName)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'compile')
                        }
                    }
                }
            }
        }
    }
}

wrapper {
    gradleVersion = '4.6'
}

task uploadAll {
    group = 'publishing'
    description = 'Publishes all modules.'

    rootProject.childProjects.values().each {
        dependsOn it.getTasksByName('bintrayUpload', true).first()
    }
    dependsOn bintrayUpload
}

publishing {
    publications {
        BintrayRelease(MavenPublication) {
            groupId = project.group
            artifactId = 'kotlin-json'
            version = project.version
            pom.withXml {
                def repositoriesNode = asNode().appendNode('repositories')
                def repositoryNode = repositoriesNode.appendNode('repository')

                repositoryNode.appendNode('name', 'bintray')
                repositoryNode.appendNode('id', 'bintray-kgustave-maven')
                repositoryNode.appendNode('url', 'https://dl.bintray.com/kgustave/maven')

                def dependenciesNode = asNode().appendNode('dependencies')
                def dependencyNode = dependenciesNode.appendNode('dependency')
                def core = project(":core")

                dependencyNode.appendNode('groupId', core.group)
                dependencyNode.appendNode('artifactId', 'kotlin-json-core')
                dependencyNode.appendNode('version', core.version)
                dependencyNode.appendNode('scope', 'compile')
            }
        }
    }
}